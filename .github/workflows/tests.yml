name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: stocky_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          tests/requirements-test.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r tests/requirements-test.txt

    - name: Lint with flake8
      run: |
        # Install flake8
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: |
        pip install mypy
        mypy src/ --ignore-missing-imports

    - name: Run test suite with coverage
      run: |
        python scripts/test_runner.py --category all --coverage --verbose
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/stocky_test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella-python-${{ matrix.python-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate coverage HTML report
      run: |
        pip install coverage
        coverage report --show-missing
        coverage html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-python-${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety bandit

    - name: Security scan with safety
      run: |
        safety check

    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: 30

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Build Docker image
      run: |
        docker build -t stocky-backend:test .

    - name: Test Docker image
      run: |
        # Start the container
        docker run -d --name stocky-test -p 8000:8000 stocky-backend:test
        
        # Wait for the container to be ready
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test API endpoint
        curl -f http://localhost:8000/api/v1/docs || exit 1
        
        # Stop the container
        docker stop stocky-test
        docker rm stocky-test

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          tests/requirements-test.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r tests/requirements-test.txt
        pip install locust

    - name: Run performance tests
      run: |
        # Run slow tests using test runner
        python scripts/test_runner.py --category slow --verbose

    - name: Performance regression check
      run: |
        # Run benchmark tests if they exist
        pytest tests/ -k "benchmark" --benchmark-only --benchmark-json=benchmark.json || echo "No benchmark tests found"

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: benchmark.json
        retention-days: 30

  merge-coverage:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
    - name: Merge coverage artifacts
      uses: actions/upload-artifact/merge@v4
      with:
        name: all-coverage-reports
        pattern: coverage-report-python-*
        delete-merged: true
        retention-days: 30
